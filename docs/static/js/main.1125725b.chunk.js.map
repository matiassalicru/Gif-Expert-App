{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","type","settype","onSubmit","e","preventDefault","length","trim","placeholder","value","onChange","target","id","div","document","querySelector","innerHTML","setTimeout","handleError","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","getElementById"],"mappings":"oMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,OAExBF,oBAAS,GAFe,mBAEzCG,EAFyC,KAEnCC,EAFmC,KAoChD,OACE,0BAAMC,SA3Ba,SAACC,GACpBA,EAAEC,iBAEwB,IAAtBN,EAAWO,OACbJ,GAAQ,GAEJH,EAAWQ,OAAOD,OAAS,IAC7BT,EAAc,CAACE,IACfC,EAAc,OAoBhB,2BACEQ,YAAY,SACZP,KAAK,OACLQ,MAAOV,EACPW,SAtCoB,SAACN,GAEzBJ,EAAcI,EAAEO,OAAOF,UAsCrB,yBAAKG,GAAG,UACPX,GArBe,WAElB,IAAMY,EAAMC,SAASC,cAAc,UAEnCF,EAAIG,UAAY,8BAEhBC,YAAW,WACTJ,EAAIG,UAAY,KACf,KAcDE,K,uBCjDOC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLlB,GAAIkB,EAAIlB,GACRmB,MAAOD,EAAIC,MACXT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QAXjB,kBAedM,GAfc,4CAAH,sDCEPM,EAAc,SAAC,GAAqB,EAApBtB,GAAqB,IAAjBmB,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IACpC,OACE,yBAAKa,UAAU,0CACb,yBAAKC,IAAKd,EAAKe,IAAKN,IACpB,2BAAIA,KCFCO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdtB,mBAAS,CACjC6B,KAAM,GACNY,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAU,WACRvB,EAAQC,GACHuB,MAAK,SAACC,GACHH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGpB,CAACnB,IAEGoB,EDd2BK,CAAazB,GAAjCY,EADyB,EAC/BL,KAAcY,EADiB,EACjBA,QAEtB,OACE,oCACE,wBAAIJ,UAAU,YAAYf,GAEzBmB,GAAW,uBAAGJ,UAAU,mCAAb,WACZ,yBAAKA,UAAU,aACZH,EAAOH,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAagB,IAAKhB,EAAIlB,IAAQkB,UEV3BiB,EAAe,WAAO,IAAD,EAEIjD,mBAAS,CAAC,eAFd,mBAEzBkD,EAFyB,KAEbnD,EAFa,KAIhC,OACE,oCACE,wBAAIsC,UAAU,sDAAd,eAGA,kBAAC,EAAD,CAAatC,cAAeA,IAC5B,6BAEA,4BACGmD,EAAWnB,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAS0B,IAAK1B,EAAUA,SAAUA,U,MCX5C6B,IAASC,OACL,kBAAC,EAAD,MACFpC,SAASqC,eAAe,U","file":"static/js/main.1125725b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [type, settype] = useState(false)\r\n\r\n  const handleInputChange = (e) => {\r\n    \r\n    setInputValue(e.target.value);\r\n\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.length === 0) {\r\n      settype(true)\r\n    } else {\r\n      if (inputValue.trim().length > 2) {\r\n        setCategories([inputValue]);\r\n        setInputValue(\"\");\r\n      }\r\n    }\r\n    \r\n  };\r\n\r\n  const handleError = () =>{\r\n\r\n    const div = document.querySelector('#error');\r\n\r\n    div.innerHTML = 'Please type something first';\r\n\r\n    setTimeout(() => {\r\n      div.innerHTML = '';\r\n    }, 2000);\r\n\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        placeholder=\"Search\"\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      />\r\n      <div id=\"error\"></div>\r\n      {type && \r\n      handleError()}\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=20&api_key=crEKQIwmI3PiNoGkdTzEGAQcUd7PwmYh`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n      <div className=\"card animate__animated animate__fadeIn\">\r\n        <img src={url} alt={title} />\r\n        <p>{title}</p>\r\n      </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className='category'>{category}</h3>\r\n\r\n      {loading && <p className=\"animate__animated animate__flip\">Loading</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category)\r\n        .then((imgs) => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false,\r\n        });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState([\"The office\"]);\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"title animate__animated animate__lightSpeedInRight\">\r\n        Gifs to you\r\n      </h1>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp'\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}