{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","categories","setCategories","useState","inputValue","setInputValue","type","settype","handleError","setTimeout","onSubmit","e","preventDefault","length","trim","cats","placeholder","value","onChange","target","id","className","onClick","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAAoB,EACvBC,mBAAS,IADc,mBACpDC,EADoD,KACxCC,EADwC,OAEnCF,oBAAS,GAF0B,mBAEpDG,EAFoD,KAE9CC,EAF8C,KAuBrDC,EAAc,WAElBC,YAAW,WACTF,GAAQ,KACP,MAQL,OACE,oCACE,0BAAMG,SA7BW,SAACC,GACpBA,EAAEC,iBAEER,EAAWS,OAAS,GACtBN,GAAQ,GACRC,KAEIJ,EAAWU,OAAOD,QAAU,IAC9BX,GAAc,SAAAa,GAAI,OAAIX,GAAJ,mBAAmBW,OACrCV,EAAc,OAqBd,2BAAID,GACJ,2BACEY,YAAY,SACZV,KAAK,OACLW,MAAOb,EACPc,SAvCkB,SAACP,GACzBN,EAAcM,EAAEQ,OAAOF,UAyClBX,GAAQ,yBAAKc,GAAG,SAAR,wCAEVnB,EAAWY,OAAS,EACnB,4BAAQQ,UAAU,MAAMC,QAlBV,WAClBpB,EAAc,MAkBP,IADH,aAEa,KAGb,6BACE,uBAAGmB,UAAU,eAAb,6B,uBC1DGE,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLd,GAAIc,EAAId,GACRe,MAAOD,EAAIC,MACXT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QATjB,kBAadM,GAbc,4CAAH,sDCIPM,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOT,EAAS,EAATA,IACjC,OACE,yBAAKL,UAAU,0CACb,yBAAKkB,IAAKb,EAAKc,IAAKL,IACpB,2BAAIA,KCHCM,EAAU,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdrB,mBAAS,CACjC4B,KAAM,GACNW,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRtB,EAAQC,GAAUsB,MAAK,SAACC,GACtBH,EAAS,CACPb,KAAMgB,EACNL,SAAS,SAGZ,CAAClB,IAEGmB,EDZ2BK,CAAaxB,GAAjCY,EADyB,EAC/BL,KAAcW,EADiB,EACjBA,QAEtB,OACE,oCACE,wBAAIrB,UAAU,YAAYG,GAEzBkB,GAAW,uBAAGrB,UAAU,4CAAb,WAEZ,yBAAKA,UAAU,oDACZe,EAAOH,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAae,IAAKf,EAAId,IAAQc,UEZ3BgB,EAAe,WAAO,IAAD,EACI/C,mBAAS,IADb,mBACzBF,EADyB,KACbC,EADa,KAGhC,OACE,oCACE,wBAAImB,UAAU,sDAAd,eAGA,kBAAC,EAAD,CAAapB,WAAYA,EAAYC,cAAeA,IACpD,6BACA,4BACGD,EAAWgC,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAASyB,IAAKzB,EAAUA,SAAUA,U,MCT5C2B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.92908ca2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({categories, setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [type, settype] = useState(false)\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.length < 2) {\r\n      settype(true)\r\n      handleError();\r\n    } else {\r\n      if (inputValue.trim().length >= 2) {\r\n        setCategories(cats=> [inputValue, ...cats]);\r\n        setInputValue(\"\");\r\n      }\r\n    }\r\n    \r\n  };\r\n\r\n  const handleError = () =>{\r\n\r\n    setTimeout(() => {\r\n      settype(false);\r\n    }, 2000);\r\n\r\n  }\r\n\r\n  const handleClear = () => {\r\n    setCategories([]);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <p>{inputValue}</p>\r\n        <input\r\n          placeholder=\"Search\"\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n        />\r\n\r\n        {type && <div id=\"error\">Please type more than one character</div>}\r\n      </form>\r\n      {categories.length > 0 ? (\r\n        <button className=\"btn\" onClick={handleClear}>\r\n          {\" \"}\r\n          Clear Gifs{\" \"}\r\n        </button>\r\n      ) : (\r\n        <div>\r\n          <p className=\"after-title\">Find your perfect gifs</p>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=20&api_key=crEKQIwmI3PiNoGkdTzEGAQcUd7PwmYh`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const GifGridItem = ({ title, url}) => {\r\n    return (\r\n      <div className=\"card animate__animated animate__fadeIn\">\r\n        <img src={url} alt={title} />\r\n        <p>{title}</p>\r\n      </div>\r\n    );\r\n}\r\n\r\nGifGridItem.propTypes = { \r\n  title: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired,\r\n}","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"category\">{category}</h3>\r\n\r\n      {loading && <p className=\" loading animate__animated animate__flip\">Loading</p>}\r\n\r\n      <div className=\"card-grid animate__animated animate__backInRight\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nGifGrid.propTypes = {\r\n  category: PropTypes.string.isRequired,\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([]);\r\n\r\n  return (\r\n    <>\r\n      <h1 className=\"title animate__animated animate__lightSpeedInRight\">\r\n        Gifs to you\r\n      </h1>\r\n      <AddCategory categories={categories} setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp'\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}